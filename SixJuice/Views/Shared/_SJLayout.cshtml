<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/SJ.css")
</head>
<body ondragstart="return false;" ondrop="return false;">
    @Scripts.Render("~/bundles/jquery")

    <div class="SJBody" style="display:none">
        @RenderBody()
    </div>
    <div class="SJNav">
        <button class="SJNavButton">
            <span class="SJIcon-bar"></span>
            <span class="SJIcon-bar"></span>
            <span class="SJIcon-bar"></span>
        </button>
    </div>
    <div class="SJMenu">
        <div id="menuTitle" class="menuButtonSize">SixJuice</div>
        <div id="menuMain" class="menuPane">
            <button id="home" class="menuButtonSize">BACK TO HOME</button>
            <button id="menuRules" class="menuButtonSize">RULES</button>
            <button id="menuAbout" class="menuButtonSize">ABOUT</button>
        </div>
        <div id="menuRulesPane" class="menuPane hiddenPane">
            <button class="menuBack menuButtonSize">BACK</button>
            <div class="para">
                <p>Rules written out here.</p>
            </div>
        </div>
        <div id="menuAboutPane" class="menuPane hiddenPane">
            <button class="menuBack menuButtonSize">BACK</button>
            <div class="para">
                <p>Read all about stuff, and junk.</p>
            </div>
        </div>
        @*<div class="vert10 medText menuTitle">SixJuice</div>
        <span class="sidepad"></span>
        <button class="menuItem sidepadsandwich smallText" id="home">Home</button>
        <span class="sidepad"></span>
        <button class="menuItem sidepadsandwich smallText" id="rules">Rules</button>
        <span class="sidepad"></span>
        <button class="menuItem sidepadsandwich smallText" id="about">About</button>*@
    </div>

    <script src="Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <script type="text/javascript">
        $(function () {
            // Menu history item class - node of linked list for internal menu memory stack
            //function menuHistoryItem(subname, text, backItem) {
            //    this.sub = subname;
            //    this.title = text;
            //    this.back = backItem;

            //    this.getHistoryObject = function() {
            //        return { screen: "menu", sub: this.sub, title: this.title };
            //    }

            //    this.pushThisState = function() {
            //        history.pushState(this.getHistoryObject(), this.title, window.location);
            //    }
            //}

            // Use for going to a new menu screen - adds it to history (internal & browser) and loads screen
            //addAndGoToMenu = function (subname, text, pushToBrowser) {
            //    current = new menuHistoryItem(subname, text, current);
            //    if (pushToBrowser) { current.pushThisState(); }
            //    goToMenu(current.sub);
            //}
            addAndGoToMenu = function (subname, text) {
                current = { sub: subname, title: text };
                history.pushState({ screen: "menu", sub: current.sub, title: current.title }, current.title, window.location);
                goToMenu(current.sub);
            }

            // Reference to top of internal menu memory stack (as linked list). This seed item always stays at end (bottom).
            //current = new menuHistoryItem("main", "Menu - Main", null);
            current = { sub: "main", title: "Main menu" };
            menuOpen = false;

            openMenu = function () {
                if (!menuOpen) {
                    menuOpen = true;
                    $('.SJMenu').addClass("tall");
                    $('.SJNavButton').addClass("SJNavButtonHighlight");
                    $('.SJIcon-bar').addClass("SJIcon-barHighlight");
                }
            }
            closeMenu = function () {
                if (menuOpen) {
                    menuOpen = false;
                    $('.SJMenu').removeClass("tall");
                    $('.SJNavButton').removeClass("SJNavButtonHighlight");
                    $('.SJIcon-bar').removeClass("SJIcon-barHighlight");
                }
            }

            $('.SJNavButton').click(function () {
                if (!menuOpen) {
                    //current.pushThisState();
                    history.pushState({ screen: "menu", sub: current.sub, title: current.title}, current.title, window.location);
                    openMenu();
                } else {
                    pushCurrentState();
                    closeMenu();
                }
            });

            $('#home').click(function () {
                window.location.href = getBaseURL(); // Reloads start page
            });

            $('#menuRules').click(function () {
                addAndGoToMenu("rules", "Menu - Rules");
            });

            $('#menuAbout').click(function () {
                addAndGoToMenu("about", "Menu - About");
            });

            $('.menuBack').click(function () {
                window.history.back();
            })

            // Fired on browser back/forward navigation
            //  Here, history states are intercepted if they are for menu navigation. Other screen history items are passed along to home.js or game.js
            //  If history state is a menu state, the menu is brought up. Otherwise, it is closed. If history state is a menu state and the menu is already
            //  up, the state is used to navigate to the right menu. An internal menu history state is maintained for the purpose of returning to the same
            //  point when switching back and forth from the menu. Internal history is simply a linked list, containing only the 'back' history ('forward'
            //  items are just added when needed);
            window.addEventListener('popstate', function (e) {
                if (e.state != null && e.state.screen == "menu") {
                    if (!menuOpen) {
                        openMenu();
                    }
                    goToMenu(e.state.sub, e.state.title);

                    //if (menuOpen) {
                    //    if (current.back != null && current.back.sub == e.state.sub) { // Popped state matches internal previous menu state: this is a 'back'
                    //        current = current.back;
                    //        goToMenu(e.state.sub);
                    //    } else { // Popped state isn't previous menu state: this is a 'forward'
                    //        addAndGoToMenu(e.state.sub, e.state.title, false);
                    //    }
                    //} else {
                    //    openMenu();
                    //}
                } else {
                    if (menuOpen) {
                        closeMenu();
                    } else {
                        firePopstate(e);
                    }
                }
            });

            //Shows/hides the given menu contents
            goToMenu = function (subName, text) {
                current = { sub: subName, title: text };
                $('.menuPane').addClass('hiddenPane');
                switch (subName) {
                    case "main":
                        $('#menuMain').removeClass('hiddenPane');
                        break;
                    case "rules":
                        $('#menuRulesPane').removeClass('hiddenPane');
                        break;
                    case "about":
                        $('#menuAboutPane').removeClass('hiddenPane');
                        break;
                    default: break;
                }
            }

            //---------HELPERS----------------

            setSize = function (selector, wid, hei) {
                $(selector).css("width", wid);
                $(selector).css("height", hei);
            }
            setPosition = function (selector, x, y) {
                $(selector).css("left", x);
                $(selector).css("top", y);
            }

            maprange = function (inVal, inMin, inMax, outMin, outMax) {
                return Math.min(Math.max((inVal - inMin) / (inMax - inMin) * (outMax - outMin) + outMin, outMin), outMax);
            }

            //----------RESIZING--------------
            // Parameters
            buttonMinW = 100;
            buttonMaxW = 500;
            buttonMinH = 30;
            buttonMaxH = 90;
            paraMinW = 120;
            paraMaxW = 700;
            menuMargin = 15;

            resizeBody = function (width, height) {
                $('body').css("width", width - 1);
                $('body').css("height", height - 1);
                $('.SJBody').css("width", width - 1);
                $('.SJBody').css("height", height - 1);

                buttonWidth = maprange(width, 150, 675, buttonMinW, buttonMaxW);
                buttonHeight = maprange(height, 200, 500, buttonMinH, buttonMaxH);
                paneHeight = height - buttonHeight - menuMargin * 3;
                paraWidth = maprange(width, 150, 800, paraMinW, paraMaxW);
                setSize('.menuButtonSize', buttonWidth, buttonHeight);
                setSize('.menuPane', paraWidth, paneHeight);
                setSize('.para', paraWidth, paneHeight - buttonHeight - menuMargin);
                $('.SJMenu > div > .para').css({ "width": paraWidth });

                leftside = (width - paraWidth) / 2;
                setPosition('#menuTitle', leftside, menuMargin);
                setPosition('.menuPane', leftside, menuMargin * 2 + buttonHeight);

                buttonLeftSide = (paraWidth - buttonWidth) / 2;
                setPosition('.menuBack', buttonLeftSide, 0);
                setPosition('#home', buttonLeftSide, 0);
                setPosition('#menuRules', buttonLeftSide, buttonHeight + menuMargin);
                setPosition('#menuAbout', buttonLeftSide, 2 * (buttonHeight + menuMargin));
                setPosition('.para', 0, buttonHeight + menuMargin);

                $('#menuTitle').css({ "font-size": Math.min(maprange(width, 150, 500, 20, 50), maprange(height, 200, 500, 20, 50)) });
                $('.menuBack').css({ "font-size": maprange(Math.min(width, height * 1.3), 200, 650, 15, 40) });
                $('#home').css({ "font-size": maprange(Math.min(width, height * 1.3), 200, 650, 15, 40) });
                $('#menuRules').css({ "font-size": maprange(Math.min(width, height * 1.3), 200, 650, 15, 40) });
                $('#menuAbout').css({ "font-size": maprange(Math.min(width, height * 1.3), 200, 650, 15, 40) });
                $('#home').text(width < 200 && height < 250 ? "HOME" : "BACK TO HOME");
                $('.para > p').css({ "font-size": Math.min(maprange(width, 200, 700, 12, 22), maprange(height, 150, 450, 12, 22)) });
            }

            $(document).ready(function () {
                resizeBody(window.innerWidth, window.innerHeight);

                $(window).resize(function () {
                    resizeBody(window.innerWidth, window.innerHeight);
                })
            })
        });
    </script>
</body>
</html>
